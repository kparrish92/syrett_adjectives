library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
rep_df
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
a_df = rep_df %>% filter(animacy_condtion == "animate")
round(mean(a_df$.value), digits = 2) # effect for animate
round(hdi(a_df$.value), digits = 2)[1] # hdi lo for animate
round(hdi(a_df$.value), digits = 2)[2] # hdi hi for animate
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
mod_b_2
#| label: fig-frame
#| fig-cap: "The probability of guessing an emotion adjective by frame and animacy"
knitr::include_graphics(here("docs", "plots", "task_2_bayesian_frame.png"))
#| label: fig-hist
#| fig-cap: "Histrograms of the confidence ratings in all 4 conditions"
knitr::include_graphics(here("docs", "plots", "ratings_desc.png"))
#| label: tbl-rating-mod
#| tbl-cap: Summary of the posterior distribution modeling the probability of a given confidence rating as a function of animacy and frame The table includes posterior medians, the 95% HDI, the percentage of the HDI within the ROPE, and the maximum probabilityof effect (MPE)."
read_csv(here("docs", "tables", "study_2_model_ord.csv"), col_types = cols(.default = "c")) %>%
knitr::kable(format = "pandoc", align = c("l", "r", "r", "r", "r", "r"),
label = "study2-mod-ord")
read_csv(here("docs", "tables", "study_2_model_ord.csv"), col_types = cols(.default = "c")) %>%
knitr::kable(format = "pandoc", align = c("l", "r", "r", "r", "r", "r"),
label = "study2-mod-ord")
source(here::here("scripts", "task_2", "00_libs.R"))
target_words = c("DAXY", "WILPY", "SPOOVY", "TROBY", "BRIPSY", "LARPY")
## load data
task_2 = read.csv(here("data", "tidy", "task_2_tidy.csv")) %>%
filter(word_col %in% target_words)
em_adj_df = read.csv(here("data", "tidy", "em_adj_df.csv"))
em_adj_df_ratings = read.csv(here("data", "tidy", "em_adj_df_ratings.csv"))
target_words = c("DAXY", "WILPY", "SPOOVY", "TROBY", "BRIPSY", "LARPY")
task_2 = read.csv(here("data", "tidy", "task_2_tidy.csv")) %>%
filter(word_col %in% target_words)
em_adj_df = read.csv(here("data", "tidy", "em_adj_df.csv"))
mod_b_2 = read_rds(here("data", "models", "ws_model-3.RDS"))
total_adjective_guesses = nrow(task_2 %>% filter(type == "Adjective?" & answers == 1))/nrow(task_2 %>% filter(type == "Adjective?"))
prop_emotional = nrow(task_2 %>% filter(type == "Emotion Adj?-Conserv" & answers == 1))/nrow(task_2 %>% filter(type == "Adjective?" & answers == 1))
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
# animacy
a_df = rep_df %>% filter(animacy_condtion == "animate")
ia_df = rep_df %>% filter(animacy_condtion == "inanimate")
# frame
b_df = rep_df %>% filter(frame_content_condition == "bleached")
l_df = rep_df %>% filter(frame_content_condition == "lexical")
# animacy-frame interaction
## animate bleached
ab_df = rep_df %>% filter(animacy_condtion == "animate" & frame_content_condition == "bleached")
## animate lexical
al_df = rep_df %>% filter(animacy_condtion == "animate" & frame_content_condition == "lexical")
## inanimate bleached
ib_df = rep_df %>% filter(animacy_condtion == "inanimate" & frame_content_condition == "bleached")
## inanimate lexical
il_df = rep_df %>% filter(animacy_condtion == "inanimate" & frame_content_condition == "lexical")
ord_mod = read_rds(here("data", "models", "study_2_b_ratings.RDS"))
ws_mod = read_rds(here("data", "models", "ws_model.RDS"))
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
ord_report = read.csv(here("data", "tidy", "ord_report.csv"))
study_2_b_ratings.RDS
ord_mod = read_rds(here("data", "models", "study_2_b_ratings.RDS"))
ord_mod
View(em_adj_df_ratings)
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
ws_mod_3
mod_3_3_2 = as.mcmc(ws_mod_3)
d = as.mcmc(mod_3_3_2)
mod_3_3_2 = as.mcmc(ws_mod_3)
d = as.mcmc(mod_3_3_2)
as.mcmc(ws_mod_3)
mod_3_3_2 = as.mcmc(ws_mod_3)
gelman.diag(mod_3_3_2)
mod_3_3_2 = as.mcmc(ws_mod_3)
gelman.diag(mod_3_3_2)
mod_3_4_4 = as.mcmc(ord_report)
gelman.diag(ord_report)
gelman.diag(ord_report)
gelman.diag(ord_report)
gelman.diag(ord_report)
gelman.diag(ord_report)
as.mcmc(ord_report)
mod_3_4_4 = as.mcmc(ord_mod)
gelman.diag(ord_mod)
mod_3_4_4 = as.mcmc(ord_mod)
mod_3_4_4
ord_mod
gelman.diag(ord_mod)
# Task 2 is the ordinal regression
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS")) # 3.2.2
ord_mod = read_rds(here("data", "models", "study_2_b_ratings.RDS")) # 3.4.4
mod_3_3_2 = as.mcmc(ws_mod_3)
gelman.diag(mod_3_3_2)
mod_3_4_4 = as.mcmc(ord_mod)
gelman.diag(ord_mod)
mod_3_3_2
mod_3_4_4
View(mod_3_4_4)
mod_3_4_4[[1]]
mod_3_4_4[[1]] = as.mcmc(ord_mod)
gelman.diag(ord_mod)
mod_3_4_4[[1]] = as.mcmc(ord_mod)
mod_3_4_4 = as.mcmc(ord_mod)[[1]]
gelman.diag(ord_mod)
mod_3_4_4 = as.mcmc(ord_mod)[[1]]
as.mcmc(ws_mod_3)
mod_3_4_4 = as.mcmc(ord_mod[[1]])
mod_3_4_4 = as.mcmc(ord_mod[[1]])
gelman.diag(mod_3_4_4)
mod_3_4_4 = as.mcmc(ord_mod)
gelman.diag(mod_3_4_4)
as.mcmc(ord_mod)
mod_3_4_4 = abs(as.mcmc(ord_mod))
mod_3_4_4 = as.mcmc(ord_mod)
as.mcmc(ord_mod)
as.mcmc(ws_mod_3)
mod_3_3_2 = as.mcmc(ws_mod_3)
mod_3_4_4 = as.mcmc(ord_mod)
View(mod_3_4_4)
mod_3_4_4 = as.mcmc(ord_mod)[[1]]
mod_3_4_4 = as.mcmc(ord_mod)[[1]]
mod_3_4_4 = as.mcmc(ord_mod)[[1]] %>% as.mcmc()
gelman.diag(mod_3_4_4[[1]])
gelman.diag(mod_3_4_4[[1]])
gelman.diag(mod_3_4_4[[1]])
gelman.diag(mod_3_4_4[[1]])
gelman.diag(mod_3_4_4[[1]])
gelman.diag(mod_3_4_4[[1]])
mod_3_4_4[[1]]
mod_3_4_4[[1]]
mod_3_4_4[[1]]
mod_3_4_4[[1]]
mod_3_4_4[[1]]
mod_3_4_4[[1]]
mod_3_4_4[[1]]
as.mcmc(ord_mod[[1]])
as.mcmc(ord_mod[[1]])
as.mcmc(ord_mod)
mod_3_4_4 = as.mcmc(ord_mod)
mod_3_4_4
mod_3_4_4[[1]]
mod_3_4_4 = as.mcmc(ord_mod)[[2]]
gelman.diag(mod_3_4_4)
View(mod_3_3_2)
mod_3_4_4 = as.mcmc(ord_mod)
mod_3_4_4[[1]]
as.mcmc(ws_mod_3)
mod_3_3_2 = as.mcmc(ws_mod_3)
gelman.diag(mod_3_3_2)
?gelman.diag
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
gelman.diag(mod_3_4_4)
mod_3_4_4[[1]]
gelman.diag(mod_3_4_4)[[1]]
gelman.diag(mod_3_4_4)[[1]]
gelman.diag(mod_3_4_4)[[1]]
gelman.diag(mod_3_4_4)[[1]]
gelman.diag(mod_3_4_4)[[1]]
as.mcmc.list(mod_3_4_4)[[1]]
mod_3_4_4 = as.mcmc.list(ord_mod)
mod_3_4_4 = as.mcmc.list(ord_mod)
mod_3_4_4 = as.mcmc(ord_mod)
as.mcmc.list(mod_3_4_4)[[1]]
gelman.diag(
as.mcmc.list(mod_3_4_4)[[1]])
as.mcmc.list(mod_3_4_4)
gelman.diag(as.mcmc.list(mod_3_4_4))
View(mod_3_3_2)
mod_3_4_4[[1]]
mod_3_3_2
mod_3_3_2[[1]]
mod_3_3_2
mod_3_3_2
mod_3_3_2
report(ws_mod_3)
install.packages("report")
library(report)
install.packages("insight")
library(report)
library(insight)
library(report)
remove.packages("insight")
install.packages("insight")
library(insight)
library(report)
report(ws_mod_3)
report(ws_mod_3, verbose = FALSE)
ws_mod_3
ws_mod_3
ws_mod
ws_mod_3
study_2_b.RDS
brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition, family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b.RDS"))
source(here::here("scripts", "task_2", "00_libs.R"))
em_adj_df = read.csv(here("data", "tidy", "em_adj_df.csv"))
em_adj_df_ratings = read.csv(here("data", "tidy", "em_adj_df_ratings.csv"))
### LOG MOD
brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition, family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b.RDS"))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id), family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id), family = binomial(link = "logit"), data = em_adj_df))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id), family = binomial(link = "logit"), data = em_adj_df)
?brms
?brm
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
iter = 4000,
family = bernoulli(link = "logit"), data = em_adj_df)
### within-subj mod
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
iter = 5000,
family = bernoulli(link = "logit"), data = em_adj_df)
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
iter = 5000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
iter = 10000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
em_adj_df
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
rep_df
a_df = rep_df %>% filter(animacy_condtion == "animate")
round(mean(a_df$.value), digits = 2) # effect for animate
round(hdi(a_df$.value), digits = 2)[1] # hdi lo for animate
round(hdi(a_df$.value), digits = 2)[2] # hdi hi for animate
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = animacy_condtion)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
iter = 4000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
a_df = rep_df %>% filter(animacy_condtion == "animate")
round(mean(a_df$.value), digits = 2) # effect for animate
round(hdi(a_df$.value), digits = 2)[1] # hdi lo for animate
round(hdi(a_df$.value), digits = 2)[2] # hdi hi for animate
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
#    iter = 4000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id),
#    iter = 4000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
a_df = rep_df %>% filter(animacy_condtion == "animate")
round(mean(a_df$.value), digits = 2) # effect for animate
round(hdi(a_df$.value), digits = 2)[1] # hdi lo for animate
round(hdi(a_df$.value), digits = 2)[2] # hdi hi for animate
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition, word_col) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
#| label: tbl-log-model
#| tbl-cap: "Summary of the posterior distribution modeling of the probability of guessing an emotion adjective as a function of animacy and frame The table includes posterior medians, the 95% HDI, the percentage of the HDI within the ROPE, and the maximum probability of effect (MPE)."
read_csv(here("docs", "tables", "study_2_model.csv"), col_types = cols(.default = "c")) %>%
knitr::kable(format = "pandoc", align = c("l", "r", "r", "r", "r", "r"),
label = "study2-mod-log")
View(a_df)
View(em_adj_df)
ws_mod_3
brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition +
(1 | prolific_id) + (1 | word_col),
#    iter = 4000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition +
(1 | prolific_id) + (1 | word_col),
#    iter = 4000,
family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-32.RDS"))
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
mod_b = readRDS(here("data", "models", "ws_model-32.RDS"))
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
