em_adj_df_ratings = task_2 %>%
filter(type == "confidence" | answers == 1 & type == "Emotion Adj?-Conserv")
View(task_2)
em_adj_df_ratings = task_2 %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv")
View(em_adj_df_ratings)
em_adj_df_ratings = task_2 %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers")
em_adj_df_ratings = task_2 %>%
select(-X) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers")
em_adj_df_ratings = task_2 %>%
select(-X) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers") %>%
filter(answers == 1 | answers == 0)
em_adj_df_ratings = task_2 %>%
select(-X) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers") %>%
filter("Emotion Adj?-Conserv" == 1 | "Emotion Adj?-Conserv" == 0)
em_adj_df_ratings = task_2 %>%
select(-X) %>%
filter(answers == 1 | answers == 0) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers")
task_2 %>%
select(-X) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers") %>%
filter("Emotion Adj?-Conserv" == 1)
em_adj_df_ratings = task_2 %>%
select(-X) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers") %>%
filter(`Emotion Adj?-Conserv` == 1)
unique(em_adj_df_ratings$Confidence)
em_adj_df_ratings = task_2 %>%
select(-X) %>%
filter(type == "Confidence" | answers == 1 & type == "Emotion Adj?-Conserv") %>%
pivot_wider(names_from = "type", values_from = "answers") %>%
filter(`Emotion Adj?-Conserv` == 1) %>%
filter(Confidence == 1 | Confidence == 2 | Confidence == 3 | Confidence == 4)
ord_mod <- brm(as.integer(Confidence) ~ animacy_condtion*frame_content_condition,
data = em_adj_df_ratings,
family = cumulative(),
cores = 4)
conditional_effects(ord_mod, categorical = TRUE)
em_adj_df_ratings %>%
group_by(animacy_condtion,frame_content_condition) %>%
summarize(mean_rating = mean(Confidence),
sd_rating = sd(Confidence))
em_adj_df_ratings %>%
group_by(animacy_condtion,frame_content_condition) %>%
summarize(mean_rating = mean(as.numeric(Confidence)),
sd_rating = sd(as.numeric(Confidence)))
x = c(5,6,7,9,9,10)
y = c(4,5,6,2,1,2)
t.test(x,y)
mean(x)
mean(y)
mean(x)
mean(y)
var(x)
var(y)
var(x)
var(y)
sqrt(var(x), var(y))
sqrt(var(x), var(y))
var(x), var(y)
var(x), var(y)
sqrt(var(x)
)
sqrt(var(x) + var(y))
sqrt(var(x/6) + var(y/6))
mean(x) - mean(y)/sqrt(var(x/6) + var(y/6))
t.test(x,y)
mean(x) - mean(y)/sqrt(var(x/nrow(x)) + var(y/nrow(y)))
nrow(x)
mean(x) - mean(y)/sqrt(var(x/length(x)) + var(y/length(y)))
mean(x) - mean(y)/sqrt((var(x/length(x)) + var(y/length(y))))
mean(x) - mean(y)/sqrt((var(x/length(x)) + var(y/length(y))))
mean(x) - mean(y)/sqrt((var(x/length(x)) + var(y/length(y))))
mean(x) - mean(y)/sqrt((var(x/length(x)) + var(y/length(y))))
mean(x) - mean(y)/sqrt((var(x^2/length(x)) + var(y^2/length(y))))
(var(x^2/length(x)
var(x^2/length(x)
var(x^2/length(x)
var(x^2/length(x)
mean(x) - mean(y)/sqrt((var(x^2)/length(x)) + var(y^2)/length(y))))
mean(x) - mean(y)/sqrt((var(x^2)/length(x)) + var(y^2)/length(y))))
mean(x) - mean(y)/sqrt((var(x^2)/length(x)) + var(y^2)/length(y)))
mean(x) - mean(y)/sqrt((var(x^2)/length(x)) + var(y^2)/length(y))
mean(x) - mean(y)
abs(mean(x) - mean(y))/sqrt((var(x^2)/length(x)) + var(y^2)/length(y))
abs(mean(x) - mean(y))
abs(mean(x) - mean(y))
sqrt((var(x^2)/length(x)) + var(y^2)/length(y))
var(x)
var(19.3)
var(x)^2
var(x)
var(x)^2
var(x)^2
var(y)^2
var(x)^2/6
var(y)^2/6
var(x)^2/6 + var(y)^2/6
abs(mean(x) - mean(y))
t.test(x,y)
abs(mean(9.6) - mean(7.3))/
(var(19.3)^2)/13 + (var(24)^2)/13
abs(mean(9.6) - mean(7.3))/
(var(19.3)^2)/13 + (var(24)^2)/13
abs(mean(9.6) - mean(7.3))
(var(19.3)^2)/13 + (var(24)^2)/13
(var(19.3)^2)/13 + (var(24)^2)/13
(var(19.3)^2)/13
var(19.3)^2)/13
var(19.3)^2)/13
var(19.3)^2)/13
/13 + (var(24)^2)/13
var(19.3)^2
var(19.3)^2
var(19.3)^2
var(19.3)
19.3^2/13 + 24^2)/13
19.3^2/13 + 24^2)/13
19.3^2/13 + 24^2/13
19.3^2/13 + 24^2/13
abs(mean(9.6) - mean(7.3))
(19.3^2)
sqrt((19.3^2)/13 + 24^2/13)
abs(mean(9.6) - mean(7.3))
sqrt((19.3^2)/13 + 24^2/13)
19.3^2
24
24^2
sqrt(372.49/13 + 576/13)
abs(mean(9.6) - mean(7.3))
sqrt(372.49/13 + 576/13)
x = c(12,12.3,14.1,6.2,6.9,5.
16.2, 3.2, 4.8, 5.9, 15, 12, 11.1)
x = c(12,12.3,14.1,6.2,6.9,5.
16.2, 3.2, 4.8, 5.9, 15, 12, 11.1)
x = c(12,12.3,14.1,6.2,6.9,5,
16.2, 3.2, 4.8, 5.9, 15, 12, 11.1)
x = c(12,12.3,14.1,6.2,6.9,5,
16.2, 3.2, 4.8, 5.9, 15, 12, 11.1)
y = c(11.2,15.1,16,7.2,3.1,1.2,
5.2, 4.1, 3.1, 11.6, 2.1, 6.5,
9.1)
t.test(x,y)
abs(mean(x) - mean(y))
abs(mean(x) - mean(y))/2
abs(mean(x) - mean(y))/2
abs(mean(x) - mean(y))
abs(mean(x) - mean(y))/1.23
abs(mean(x) - mean(y))/1.82
var(x)
var(y)
var(x)^2
var(y)^2
var(x)^2/13
var(y)^2/13
var(x)^2/13 - var(y)^2/13
sqrt(var(x)^2/13 - var(y)^2/13)
sqrt(var(x)^2/13 - var(y)^2/13)
abs(mean(x) - mean(y))
sqrt(13)
var(x)/3.6
var(x)/3.6
var(y)/3.6
var(x)/3.6 - var(y)/3.6
var(x)/3.6 + var(y)/3.6
sqrt(var(x)/3.6 + var(y)/3.6)
t.test(x,y)
abs(mean(x) - mean(y))
sqrt(372.49/13 + 576/13)
t.test(x,y)
t.test_knownvar <- function(x, y, V1, V2, m0 = 0, alpha = 0.05, alternative = "two.sided") {
M1 <- mean(x)
M2 <- mean(y)
n1 <- length(x)
n2 <- length(y)
sigma1 <- sqrt(V1)
sigma2 <- sqrt(V2)
S <- sqrt((V1 / n1) + (V2 / n2))
statistic <- (M1 - M2 - m0) / S
p <- if (alternative == "two.sided") {
2 * pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
LCL <- (M1 - M2 - S * qnorm(1 - alpha / 2))
UCL <- (M1 - M2 + S * qnorm(1 - alpha / 2))
value <- list(mean1 = M1, mean2 = M2, m0 = m0, sigma1 = sigma1, sigma2 = sigma2, S = S, statistic = statistic, p.value = p, LCL = LCL, UCL = UCL, alternative = alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
test <- t.test_knownvar(dat1$sample1, dat1$sample2,
V1 = 1, V2 = 1
)
test
t.test_knownvar(x, y)
t.test_knownvar(x, y, V1 = 1, V2 = 1)
ord_mod %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "Confidence",
re_formula = NA)
em_adj_df_ratings %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(ord_mod, dpar = TRUE, category = "Confidence",
re_formula = NA)
rating_draws = em_adj_df_ratings %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(ord_mod, dpar = TRUE, category = "Confidence",
re_formula = NA)
View(rating_draws)
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = animacy_condtion)) +
stat_halfeye(alpha = .5)
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = animacy_condtion)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_grid(~Confidence) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = animacy_condtion)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~Confidence) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~animacy_condtion) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~frame_content_condition) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~animacy_condtion) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_grid(~animacy_condtion) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_grid(~animacy_condtion, ncol = 1) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~animacy_condtion, ncol = 1) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~animacy_condtion, ncol = 1) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response")) +
ggsave(here("docs", "plots", "ratings_mod.png"))
knitr::include_graphics(here("docs", "plots", "ratings_mod.png"))
describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high"))
describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high"))
d = describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high"))
View(d)
View(d)
describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept[1]" ~ "Intercept[1[",
Parameter == "b_Intercept[2]" ~ "Intercept[2]",
Parameter == "b_Intercept[3]" ~ "Intercept[3]",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~
"animate:lexical"
))
describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept[1]" ~ "Intercept[1[",
Parameter == "b_Intercept[2]" ~ "Intercept[2]",
Parameter == "b_Intercept[3]" ~ "Intercept[3]",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~
"animate:lexical"
)) %>%
mutate(across(-c("Parameter", "ESS"), specify_decimal, k = 2)) %>%
mutate(ESS = round(ESS)) %>%
mutate(HDI = glue::glue("[{CI_low}, {CI_high}]")) %>%
select(Parameter, Median, HDI, `% in ROPE` = ROPE_Percentage, MPE = pd, Rhat, ESS) %>%
write_csv(here("docs", "tables", "study_2_model_ord.csv"))
describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept[1]" ~ "Intercept[1[",
Parameter == "b_Intercept[2]" ~ "Intercept[2]",
Parameter == "b_Intercept[3]" ~ "Intercept[3]",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~
"animate:lexical"
)) %>%
mutate(across(-c("Parameter", "ESS"), specify_decimal, k = 2)) %>%
mutate(ESS = round(ESS)) %>%
mutate(HDI = glue::glue("[{CI_low}, {CI_high}]")) %>%
select(Parameter, Median, HDI, `% in ROPE` = ROPE_Percentage, MPE = pd, Rhat, ESS)
describe_posterior(ord_mod, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept[1]" ~ "Intercept[1]",
Parameter == "b_Intercept[2]" ~ "Intercept[2]",
Parameter == "b_Intercept[3]" ~ "Intercept[3]",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~
"animate:lexical"
)) %>%
mutate(across(-c("Parameter", "ESS"), specify_decimal, k = 2)) %>%
mutate(ESS = round(ESS)) %>%
mutate(HDI = glue::glue("[{CI_low}, {CI_high}]")) %>%
select(Parameter, Median, HDI, `% in ROPE` = ROPE_Percentage, MPE = pd, Rhat, ESS) %>%
write_csv(here("docs", "tables", "study_2_model_ord.csv"))
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = response_corrected)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal()
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = response_corrected)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal()
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal()
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none")
View(em_adj_df_ratings)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(animacy_conditon~frame_content_condition) +
guides(fill=guide_legend("Response"))
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(animacy_conditon~frame_content_condition)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(animacy_conditon~frame_content_condition)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(~frame_content_condition)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(animacy_condition~frame_content_condition)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(animacy_condtion~frame_content_condition)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_grid(animacy_condtion~frame_content_condition)
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = Confidence)) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_grid(animacy_condtion~frame_content_condition) +
guides(fill=guide_legend("Response")) +
ggsave(here("docs", "plots", "ratings_desc.png"))
knitr::include_graphics(here("docs", "plots", "ratings_desc.png"))
#| label: rating-desc
#| fig-cap: "Histrograms of the confidence ratings in all 4 conditions"
knitr::include_graphics(here("docs", "plots", "ratings_desc.png"))
read_csv(here("docs", "tables", "study_2_model_ord.csv"), col_types = cols(.default = "c")) %>%
knitr::kable(format = "pandoc", align = c("l", "r", "r", "r", "r", "r"),
caption = "Summary of the posterior distribution modeling
the probability of a given confidence rating as a function of animacy and frame The table includes posterior medians, the 95% HDI,
the percentage of the HDI within the ROPE, and the maximum probability
of effect (MPE).",
label = "study2-mod-ord")
knitr::include_graphics(here("docs", "plots", "task_2_bayesian_frame.png"))
#| label: tbl-log-mod
#| fig-cap: "Summary of the  posterior distribution modeling the probability of guessing an emotion adjective as a function of animacy and frame The table includes posterior medians, the 95% HDI, the percentage of the HDI within the ROPE, and the maximum probability of effect (MPE)"
read_csv(here("docs", "tables", "study_2_model.csv"), col_types = cols(.default = "c")) %>%
knitr::kable(format = "pandoc", align = c("l", "r", "r", "r", "r", "r"))
knitr::include_graphics(here("docs", "plots", "inanimate_es.png"))
knitr::include_graphics(here("docs", "plots", "animate_es.png"))
#| label: fig-ani-es-1
#| fig-cap: "The probability of guessing an emotion adjective by frame and animacy"
knitr::include_graphics(here("docs", "plots", "inanimate_es.png"))
#| label: fig-ani-es-1
#| fig-cap: "A distribution of plausible effect sizes going from bleached to animate"
knitr::include_graphics(here("docs", "plots", "inanimate_es.png"))
knitr::include_graphics(here("docs", "plots", "animate_es.png"))
target_words = c("DAXY", "WILPY", "SPOOVY", "TROBY", "BRIPSY", "LARPY")
task_2 = read.csv(here("data", "tidy", "task_2_tidy.csv")) %>%
filter(word_col %in% target_words)
## removed 1224 - 1208 nas
em_adj_df=task_2 %>% filter(type == "Emotion Adj?-Conserv") %>%
filter(answers == 1 | answers == 0)
View(em_adj_df)
brms::brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (prolific_id | word_col), family = bernoilli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b.RDS"))
brms::brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (prolific_id | word_col), family = bernoilli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b-c.RDS"))
brms::brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (prolific_id | word_col), family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b-c.RDS"))
brms::brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (1 | word_col), family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b-c.RDS"))
brms::brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (1 | word_col), family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b-c.RDS"))
mod_b_2_c = read_rds(here("data", "models", "study_2_b-c.RDS"))
View(mod_b_2_c)
mod_b_2_c[["ranef"]]
mod_b_2_c = read_rds(here("data", "models", "study_2_b-c.RDS")) %>%
as.data.frame()
View(mod_b_2_c)
