b_df = rep_df %>% filter(frame_content_condition == "bleached")
l_df = rep_df %>% filter(frame_content_condition == "lexical")
# animacy-frame interaction
## animate bleached
ab_df = rep_df %>% filter(animacy_condtion == "animate" & frame_content_condition == "bleached")
## animate lexical
al_df = rep_df %>% filter(animacy_condtion == "animate" & frame_content_condition == "lexical")
## inanimate bleached
ib_df = rep_df %>% filter(animacy_condtion == "inanimate" & frame_content_condition == "bleached")
## inanimate lexical
il_df = rep_df %>% filter(animacy_condtion == "inanimate" & frame_content_condition == "lexical")
ord_mod = read_rds(here("data", "models", "study_2_b_ratings.RDS"))
ws_mod = read_rds(here("data", "models", "ws_model.RDS"))
ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
conditional_effects(ws_mod_3)
facet_grid(animacy_condtion~frame_content_condition) +
guides(fill=guide_legend("Response"))
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = as.factor(Confidence))) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_grid(animacy_condtion~frame_content_condition) +
guides(fill=guide_legend("Response"))
em_adj_df_ratings %>%
ggplot(aes(Confidence, fill = as.factor(Confidence))) +
geom_histogram(stat = "count", color = "black") +
theme_minimal() +
theme(legend.position = "none") +
facet_grid(animacy_condtion~frame_content_condition) +
guides(fill=guide_legend("Response")) +
ggsave(here("docs", "plots", "ratings_desc.png"))
#| label: fig-hist
#| fig-cap: "Histrograms of the confidence ratings in all 4 conditions"
knitr::include_graphics(here("docs", "plots", "ratings_desc.png"))
describe_posterior(mod_b_2, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high"))
b = describe_posterior(mod_b_2, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high"))
View(b)
unique(b$Parameter)
describe_posterior(mod_b_2, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept" ~ "Intercept",
Parameter == "b_word_colDAXY" ~ "about DP",
Parameter == "b_word_colLARPY" ~ "to VP",
Parameter == "b_word_colSPOOVY" ~ "that S",
Parameter == "b_word_colTROBY" ~ "about gerund",
Parameter == "b_word_colWILPY" ~ "of DP because S",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_word_colDAXY:animacy_condtioninanimate" ~ "about DP:animate",
Parameter == "b_word_colLARPY:animacy_condtioninanimate" ~ "to VP: animate",
Parameter == "b_word_colSPOOVY:animacy_condtioninanimate" ~ "that S: animate",
Parameter == "b_word_colTROBY:animacy_condtioninanimate" ~ "about gerund:animate",
Parameter == "b_word_colWILPY:animacy_condtioninanimate" ~ "of DP because S: animate",
Parameter == "b_word_colDAXY:frame_content_conditionlexical" ~ "about DP:lexical",
Parameter == "b_word_colLARPY:frame_content_conditionlexical" ~ "to VP:lexical",
Parameter == "b_word_colSPOOVY:frame_content_conditionlexical" ~ "that S:lexical",
Parameter == "b_word_colTROBY:frame_content_conditionlexical" ~ "about gerund:lexical",
Parameter == "b_word_colWILPY:frame_content_conditionlexical" ~ "of DP because S:lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~ "animate:lexical",
Parameter == "b_word_colDAXY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "about DP:animate:lexical",
Parameter == "b_word_colLARPY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "to VP:animate:lexical",
Parameter == "b_word_colSPOOVY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "that S:animate:lexical",
Parameter == "b_word_colTROBY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "about gerund:animate:lexical",
Parameter == "b_word_colWILPY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "of DP because S:animate:lexical"
))
)) %>%
mutate(across(-c("Parameter", "ESS"), specify_decimal, k = 2)) %>%
mutate(ESS = round(ESS)) %>%
mutate(HDI = glue::glue("[{CI_low}, {CI_high}]")) %>%
select(Parameter, Median, HDI, `% in ROPE` = ROPE_Percentage, MPE = pd, Rhat, ESS)
describe_posterior(mod_b_2, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept" ~ "Intercept",
Parameter == "b_word_colDAXY" ~ "about DP",
Parameter == "b_word_colLARPY" ~ "to VP",
Parameter == "b_word_colSPOOVY" ~ "that S",
Parameter == "b_word_colTROBY" ~ "about gerund",
Parameter == "b_word_colWILPY" ~ "of DP because S",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_word_colDAXY:animacy_condtioninanimate" ~ "about DP:animate",
Parameter == "b_word_colLARPY:animacy_condtioninanimate" ~ "to VP: animate",
Parameter == "b_word_colSPOOVY:animacy_condtioninanimate" ~ "that S: animate",
Parameter == "b_word_colTROBY:animacy_condtioninanimate" ~ "about gerund:animate",
Parameter == "b_word_colWILPY:animacy_condtioninanimate" ~ "of DP because S: animate",
Parameter == "b_word_colDAXY:frame_content_conditionlexical" ~ "about DP:lexical",
Parameter == "b_word_colLARPY:frame_content_conditionlexical" ~ "to VP:lexical",
Parameter == "b_word_colSPOOVY:frame_content_conditionlexical" ~ "that S:lexical",
Parameter == "b_word_colTROBY:frame_content_conditionlexical" ~ "about gerund:lexical",
Parameter == "b_word_colWILPY:frame_content_conditionlexical" ~ "of DP because S:lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~ "animate:lexical",
Parameter == "b_word_colDAXY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "about DP:animate:lexical",
Parameter == "b_word_colLARPY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "to VP:animate:lexical",
Parameter == "b_word_colSPOOVY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "that S:animate:lexical",
Parameter == "b_word_colTROBY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "about gerund:animate:lexical",
Parameter == "b_word_colWILPY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "of DP because S:animate:lexical"
)) %>%
mutate(across(-c("Parameter", "ESS"), specify_decimal, k = 2)) %>%
mutate(ESS = round(ESS)) %>%
mutate(HDI = glue::glue("[{CI_low}, {CI_high}]")) %>%
select(Parameter, Median, HDI, `% in ROPE` = ROPE_Percentage, MPE = pd, Rhat, ESS)
describe_posterior(mod_b_2, rope_range = c(-0.18, 0.18)) %>%
as_tibble() %>%
select(-c("CI", "ROPE_CI", "ROPE_low", "ROPE_high")) %>%
mutate(Parameter = case_when(
Parameter == "b_Intercept" ~ "Intercept",
Parameter == "b_word_colDAXY" ~ "about DP",
Parameter == "b_word_colLARPY" ~ "to VP",
Parameter == "b_word_colSPOOVY" ~ "that S",
Parameter == "b_word_colTROBY" ~ "about gerund",
Parameter == "b_word_colWILPY" ~ "of DP because S",
Parameter == "b_animacy_condtioninanimate" ~ "animate",
Parameter == "b_frame_content_conditionlexical" ~ "lexical",
Parameter == "b_word_colDAXY:animacy_condtioninanimate" ~ "about DP:animate",
Parameter == "b_word_colLARPY:animacy_condtioninanimate" ~ "to VP: animate",
Parameter == "b_word_colSPOOVY:animacy_condtioninanimate" ~ "that S: animate",
Parameter == "b_word_colTROBY:animacy_condtioninanimate" ~ "about gerund:animate",
Parameter == "b_word_colWILPY:animacy_condtioninanimate" ~ "of DP because S: animate",
Parameter == "b_word_colDAXY:frame_content_conditionlexical" ~ "about DP:lexical",
Parameter == "b_word_colLARPY:frame_content_conditionlexical" ~ "to VP:lexical",
Parameter == "b_word_colSPOOVY:frame_content_conditionlexical" ~ "that S:lexical",
Parameter == "b_word_colTROBY:frame_content_conditionlexical" ~ "about gerund:lexical",
Parameter == "b_word_colWILPY:frame_content_conditionlexical" ~ "of DP because S:lexical",
Parameter == "b_animacy_condtioninanimate:frame_content_conditionlexical" ~ "animate:lexical",
Parameter == "b_word_colDAXY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "about DP:animate:lexical",
Parameter == "b_word_colLARPY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "to VP:animate:lexical",
Parameter == "b_word_colSPOOVY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "that S:animate:lexical",
Parameter == "b_word_colTROBY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "about gerund:animate:lexical",
Parameter == "b_word_colWILPY:animacy_condtioninanimate:frame_content_conditionlexical" ~ "of DP because S:animate:lexical"
)) %>%
mutate(across(-c("Parameter", "ESS"), specify_decimal, k = 2)) %>%
mutate(ESS = round(ESS)) %>%
mutate(HDI = glue::glue("[{CI_low}, {CI_high}]")) %>%
select(Parameter, Median, HDI, `% in ROPE` = ROPE_Percentage, MPE = pd, Rhat, ESS) %>%
write_csv(here("docs", "tables", "study_2_model.csv"))
ws_draws$frame_type
unique(ws_draws$frame_type)
source(here::here("scripts", "task_1", "00_libs.R"))
target_words = c("DAXY", "WILPY", "SPOOVY", "TROBY", "BRISPY", "LARPY")
## load data
task_1 = read.csv(here("data", "tidy", "task_1_tidy.csv")) %>%
mutate(word_col = str_remove(word_col, ".1")) %>%
mutate(word_col = str_remove(word_col, ".1")) %>%
mutate(word_col = str_remove(word_col, ".2")) %>%
mutate(word_col = str_remove(word_col, ".2")) %>%
mutate(word_col = str_remove(word_col, ".3")) %>%
mutate(word_col = str_remove(word_col, ".3")) %>%
mutate(word_col = str_remove(word_col, ".4")) %>%
mutate(word_col = str_remove(word_col, ".4")) %>%
filter(word_col %in% target_words)
em_adj_df = read.csv(here("data", "tidy", "em_adj_df_1.csv"))
em_adj_df_ratings = read.csv(here("data", "tidy", "em_adj_df_ratings_1.csv"))
mod_b_1 = read_rds(here("data", "models", "study_1_b.RDS"))
total_adjective_guesses = nrow(task_1 %>% filter(type == "Adjective?" & answers == 1))/nrow(task_1 %>% filter(type == "Adjective?"))
prop_emotional = nrow(task_1 %>% filter(type == "Emotion Adj?" & answers == 1))/nrow(task_1 %>% filter(type == "Adjective?" & answers == 1))
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition,) %>%
add_fitted_draws(mod_b_1, dpar = TRUE, category = "answers",
re_formula = NA)
# animacy
a_df = rep_df %>% filter(animacy_condtion == "animate")
ia_df = rep_df %>% filter(animacy_condtion == "inanimate")
# frame
b_df = rep_df %>% filter(frame_content_condition == "bleached")
l_df = rep_df %>% filter(frame_content_condition == "lexical")
# animacy-frame interaction
## animate bleached
ab_df = rep_df %>% filter(animacy_condtion == "animate" & frame_content_condition == "bleached")
## animate lexical
al_df = rep_df %>% filter(animacy_condtion == "animate" & frame_content_condition == "lexical")
## inanimate bleached
ib_df = rep_df %>% filter(animacy_condtion == "inanimate" & frame_content_condition == "bleached")
## inanimate lexical
il_df = rep_df %>% filter(animacy_condtion == "inanimate" & frame_content_condition == "lexical")
# ord_mod = read_rds(here("data", "models", "study_2_b_ratings.RDS"))
# ws_mod = read_rds(here("data", "models", "ws_model.RDS"))
# ws_mod_3 = read_rds(here("data", "models", "ws_model-3.RDS"))
View(em_adj_df)
lme4::glmer(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df))
lme4::glmer(as.numeric(answers) ~ animacy_condtion*frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
null_mod = lme4::glmer(as.numeric(answers) ~ 1 + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
ac_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
anova(null_mod, ac_mod)
res_df = anova(null_mod, ac_mod)
paste0("There was a main effect of animacy ". "X (", res_df$Df[2], ") = ")
paste0("There was a main effect of animacy ". "X (", res_df$Df[2], ") = ")
paste0("There was a main effect of animacy ", "X (", res_df$Df[2], ") = ")
paste0("There was a main effect of animacy ", "\chi (", res_df$Df[2], ") = ")
paste0("There was a main effect of animacy ", "\chi (", res_df$Df[2], ") = ")
paste0("There was a main effect of animacy ", "\chi (", res_df$Df[2], ") = ")
fc_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
res_df = anova(null_mod, ac_mod, fc_mod)
anova(null_mod, ac_mod, fc_mod)
int_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
res_df = anova(null_mod, ac_mod, fc_mod, int_mod)
anova(null_mod, ac_mod, fc_mod, int_mod)
null_mod = lme4::glmer(as.numeric(answers) ~ 1 + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
source(here::here("scripts", "task_1", "00_libs.R"))
em_adj_df = read.csv(here("data", "tidy", "em_adj_df_1.csv"))
em_adj_df_ratings = read.csv(here("data", "tidy", "em_adj_df_ratings_1.csv"))
null_mod = lme4::glmer(as.numeric(answers) ~ 1 + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
ac_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
fc_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
int_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
res_df = anova(null_mod, ac_mod, fc_mod, int_mod)
View(res_df)
anova(null_mod, ac_mod, fc_mod, int_mod)
res_df = anova(null_mod, ac_mod, fc_mod, int_mod) %>%
write.csv(here("data", "tidy", "task_3_nmc.csv"))
source(here::here("scripts", "task_2", "00_libs.R"))
em_adj_df = read.csv(here("data", "tidy", "em_adj_df.csv"))
em_adj_df_ratings = read.csv(here("data", "tidy", "em_adj_df_ratings.csv"))
## Logistic regression
null_mod = lme4::glmer(as.numeric(answers) ~ 1 + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
ac_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
fc_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
int_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
anova(null_mod, ac_mod, fc_mod, int_mod)
res_df = anova(null_mod, ac_mod, fc_mod, int_mod) %>%
write.csv(here("data", "tidy", "task_2_nmc.csv"))
TukeyHSD(res_df)
summary( glht(res_df, linfct=mcp(S = "Tukey")) )
install.packages("brglm2")
library(brglm2)
summary( glht(res_df, linfct=mcp(S = "Tukey")) )
install.packages("multcomp")
library(brglm2)
library(multcomp)
summary( glht(res_df, linfct=mcp(S = "Tukey")) )
source(here::here("scripts", "task_2", "00_libs.R"))
em_adj_df = read.csv(here("data", "tidy", "em_adj_df.csv"))
em_adj_df_ratings = read.csv(here("data", "tidy", "em_adj_df_ratings.csv"))
### LOG MOD
brm(as.numeric(answers) ~ animacy_condtion*frame_content_condition, family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "study_2_b.RDS"))
### ORD MOD
brm(as.integer(Confidence) ~ animacy_condtion*frame_content_condition,
data = em_adj_df_ratings,
family = cumulative(),
cores = 4,
file = here("data", "models", "study_2_b_ratings.RDS"))
### within-subj mod
brm(as.numeric(answers) ~ word_col*animacy_condtion*frame_content_condition +
(1 | prolific_id), family = bernoulli(link = "logit"), data = em_adj_df,
file = here("data", "models", "ws_model-3.RDS"))
## Logistic regression
null_mod = lme4::glmer(as.numeric(answers) ~ 1 + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
ac_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
fc_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
int_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
res_df = anova(null_mod, ac_mod, fc_mod, int_mod) %>%
write.csv(here("data", "tidy", "task_2_nmc.csv"))
c
null_mod = lme4::glmer(as.numeric(answers) ~ 1 + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
ac_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
fc_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + (1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
int_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id),
family = binomial(link = "logit"),
data = em_adj_df)
res_df = anova(null_mod, ac_mod, fc_mod, int_mod)
View(res_df)
anova(null_mod, ac_mod, fc_mod, int_mod)
re_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id) + (prolific_id | animacy_condtion:frame_content_condition)),
re_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id) + (prolific_id | animacy_condtion:frame_content_condition),
family = binomial(link = "logit"),
data = em_adj_df)
1
re_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id) + (prolific_id | animacy_condtion:frame_content_condition),
family = binomial(link = "logit"),
data = em_adj_df))
re_mod = lme4::glmer(as.numeric(answers) ~ animacy_condtion + frame_content_condition + animacy_condtion:frame_content_condition +
(1 | word_col) + (1 | prolific_id) + (prolific_id | animacy_condtion:frame_content_condition),
family = binomial(link = "logit"),
data = em_adj_df)
anova(null_mod, ac_mod, fc_mod, int_mod)
#| label: fig-ani-es-1
#| fig-cap: "A distribution of plausible effect sizes going from bleached to lexical frames when the subject in inanimate"
knitr::include_graphics(here("docs", "plots", "inanimate_es.png"))
#| label: fig-ani-es-2
#| fig-cap: "A distribution of plausible effect sizes going from bleached to lexical frames when the subject in animate"
knitr::include_graphics(here("docs", "plots", "animate_es.png"))
#| layout-ncol: 2
#| fig-cap:
#|   - "Speed and Stopping Distances of Cars"
#|   - "Vapor Pressure of Mercury as a Function of Temperature"
knitr::include_graphics(here("docs", "plots", "inanimate_es.png"))
knitr::include_graphics(here("docs", "plots", "animate_es.png"))
source(here::here("scripts", "task_2", "03_load_data.R"))
d = conditional_effects(ord_mod)
d = conditional_effects(ord_mod, categorical = TRUE)
View(d)
d[["animacy_condtion:cats__"]]
View(d[["animacy_condtion:cats__"]])
rep_table = conditional_effects(ord_mod, categorical = TRUE)
View(rep_table)
rep_table[["animacy_condtion:cats__"]]
rep_table[["frame_content_condition:cats__"]]
View(rep_table[["animacy_condtion:cats__"]])
rep_table = conditional_effects(ord_mod, categorical = TRUE)
View(rep_table[["animacy_condtion:cats__"]])
rep_table = conditional_effects(ord_mod, categorical = TRUE)[["animacy_condtion:cats__"]]
rep_table = conditional_effects(ord_mod, categorical = TRUE)
rep_table_a = conditional_effects(ord_mod, categorical = TRUE)[["animacy_condtion:cats__"]]
rep_table_f = conditional_effects(ord_mod, categorical = TRUE)[["frame_content_condition:cats__"]]
View(rep_table_a)
View(rep_table_f)
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
View(rep_df)
library(here)
library(tidyverse)
library(janitor)
library(bayestestR)
library(bayesplot)
library(tidybayes)
library(modelr)
library(brms)
source(here::here("scripts", "task_2", "03_load_data.R"))
# Add color blind palette - The palette with grey:
cbPalette <- c("#009E73", "#ff6242", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rep_df = em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA)
round(mean(a_df$.value), digits = 2) # effect for animate
round(hdi(a_df$.value), digits = 2)[1] # hdi lo for animate
round(hdi(a_df$.value), digits = 2)[2] # hdi hi for animate
## Forest Plot
em_adj_df %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(mod_b_2, dpar = TRUE, category = "answers",
re_formula = NA) %>%
ggplot(aes(y = animacy_condtion, x = .value, fill = frame_content_condition)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
rating_draws = em_adj_df_ratings %>%
data_grid(animacy_condtion,frame_content_condition) %>%
add_fitted_draws(ord_mod, dpar = TRUE, category = "Confidence",
re_formula = NA)
rating_draws %>%
ggplot(aes(y = frame_content_condition, x = .value, fill = Confidence)) +
stat_halfeye(alpha = .5) +
scale_size_continuous(guide = "none") +
coord_cartesian(x = c(0,1), clip = "off") +
theme_minimal() +
facet_wrap(~animacy_condtion, ncol = 1) +
xlab("Probability") + ylab("Condition") +
theme(legend.position = "bottom") +
guides(fill=guide_legend("Response"))
View(rating_draws)
rating_draws %>%
group_by(animacy_condtion,frame_content_condition) %>%
summarise(estimate = mean(.value), hdi = hdi(.value))
rating_draws %>%
group_by(animacy_condtion,frame_content_condition, Confidence) %>%
summarise(estimate = mean(.value), hdi = hdi(.value))
rating_draws %>%
group_by(animacy_condtion,frame_content_condition, Confidence) %>%
summarise(estimate = mean(.value), hdi = hdi(.value)) %>%
write.csv(here("data", "tidy", "ord_report.csv"))
ord_report = read.csv(here("data", "tidy", "ord_report.csv"))
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
kable(ord_report)
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
knitr::kable(ord_report)
rating_draws %>%
group_by(animacy_condtion,frame_content_condition, Confidence) %>%
summarise(estimate = round(mean(.value), digits = 2), hdi = round(hdi(.value), digits = 2)) %>%
write.csv(here("data", "tidy", "ord_report.csv"))
rating_draws %>%
group_by(animacy_condtion,frame_content_condition, Confidence) %>%
summarise(estimate = round(mean(.value), digits = 2), hdi = round(hdi(.value), digits = 2))
rating_draws %>%
group_by(animacy_condtion,frame_content_condition, Confidence) %>%
summarise(estimate = round(mean(.value), digits = 2), hdi = round(hdi(.value), digits = 2)) %>%
write.csv(here("data", "tidy", "ord_report.csv"))
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
knitr::kable(ord_report)
View(ord_report)
glimpse(ord_report)
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
select(animacy_condtion, frame_content_condition, Condfidence,
hdi.CI_low, hdi.CI_high) %>%
knitr::kable(ord_report)
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
select(animacy_condtion, frame_content_condition, Condfidence,
hdi.CI_low, hdi.CI_high) %>%
knitr::kable(ord_report)
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
knitr::kable(ord_report)
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
knitr::kable()
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
select(-X) %>%
knitr::kable()
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
select(-X) %>%
knitr::kable()
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
dplyr::select(-X) %>%
knitr::kable()
rating_draws %>%
group_by(animacy_condtion,frame_content_condition, Confidence) %>%
summarise(estimate = round(mean(.value), digits = 2), hdi = round(hdi(.value), digits = 2)) %>%
write.csv(here("data", "tidy", "ord_report.csv"))
#| tbl-cap: "Adjusted Estimates of the Ordinal Model"
ord_report %>%
dplyr::select(-X) %>%
knitr::kable(format = "pandoc")
